{"pageProps":{"mdFile":"# Access Modifier (접근 제한자)\r\n\r\n## 접근 제한자란?\r\n\r\n말 그대로 접근을 제한하는 것입니다.\r\n그런데 왜 제한을 하는지, 어떨 때 제한을 해야하는지를 알아야 할 필요성이 있습니다.\r\n\r\n> 접근 제한자는 OOP에서 캡슐화와 연관이 있습니다.\r\n\r\n## 접근 제한자의 종류\r\n\r\n- `public`: 모든 곳에서 사용이 가능합니다. (전혀 제한하지 않음)\r\n- `protected`: 같은 패키지와 상속 받은 클래스에서만 사용이 가능합니다.\r\n- `default`: 같은 패키지에서만 사용이 가능합니다. (상속 받아도 사용할 수 없습니다.)\r\n- `private`: 해당 클래스 내에서만 사용이 가능합니다. (외부 어떤 클래스에서도 사용할 수 없습니다.)\r\n\r\n## 접근 제한자 사용 가능 범위\r\n\r\n- **class**: `public`, `default`만 사용이 가능합니다.\r\n- **field**, **method**, **constructor**: 모든 접근 제한자를 사용할 수 있습니다.\r\n\r\n> 접근 제한자는 항상 제일 앞에 붙습니다.\r\n\r\n## 캡슐화\r\n\r\n**캡슐화**는 데이터의 속성과 데이터를 처리하는 기능을 클래스로 묶는 작업을 말합니다.\r\n\r\n그럼 그냥 클래스 생성이랑 뭐가 다르지? 라고 생각할 수 있는데, **캡슐화**는 은닉성이 있어서 외부에서 접근하면 안되는 요소들에 접근을 하지 못하도록 막을 수 있습니다.\r\n\r\n*Foo.java*\r\n```java\r\npublic class Foo {\r\n  private int age;\r\n\r\n  public int getAge() {\r\n    return age;\r\n  }\r\n\r\n  public void setAge(int age) {\r\n    if(age < 0) {\r\n      return;\r\n    }\r\n    this.age = age;\r\n  } \r\n}\r\n```\r\n\r\n**Getter**, **Setter**로 예를 들어보면, 위와 같이 나이를 담는 `age`필드가 있을 때,\r\n`age`필드에 직접 접근이 가능하게 된다면, `age` 값을 음수로 넣을 수도 있습니다.\r\n\r\n어떤 이상한 사람이 그런짓을 하겠냐고 생각할 수도 있지만,\r\n세상은 넓고 이상한 사람은 충분히 많으니까 가능성 자체를 배제 시켜 버리는 것이 좋습니다.\r\n\r\n그래서 위와 같이 `if`문을 통해 넘어 오는 파라미터 값을 검사 후 `age`필드에 값을 넣게 된다면 음수 값이 들어갈 일은 없게 됩니다. **(데이터 무결성 보장)**\r\n\r\n또한, 사용자도 이 필드는 나이를 담는 필드니까 음수를 넣으면 안되고... 등등을 고민할 필요가 없어집니다.\r\n해당 메소드를 호출해 값을 넘기기만 하면 알아서 검사해주니까요.\r\n\r\n즉, 사용자는 `age`에 값이 어떻게 해서 들어가는지 몰라도 아무 상관없습니다. 용도에만 맞게 사용하면 됩니다. **(사용자 편의성)**\r\n","headTitle":"Access Modifier (접근 제한자)","fileList":[]},"__N_SSG":true}