{"pageProps":{"mdFile":"# JVM (자바 가상 머신)\r\n\r\n## JVM 이란?\r\n\r\nJVM (Java Virtual Machine)은 자바 가상 머신의 약자로, 컴파일 된 바이트 코드를 읽어 해당 OS에 맞게 기계어로 바꿔 실행시켜줍니다.\r\n그렇기 때문에 우리는 소스를 한 번만 쓰고도 여러 OS 에서 동일하게 프로그램을 실행 시킬 수 있습니다.\r\n\r\n> 우리의 소스코드는 독립적이지만, JVM은 OS에 종속적이므로 해당 OS에 맞는 JVM을 설치해야 합니다.\r\n\r\n## JVM의 구조\r\n\r\n[JVM 구조](https://jeong-pro.tistory.com/148)\r\n\r\n![JVM 구조](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F9973563D5ACE0315215FF6)\r\n\r\n### Class Loader\r\n\r\n자바 애플리케이션이 실행 중일 때, 컴파일 된 바이트 코드들을 잘 엮어서 **Runtime Data Area**에 적재합니다.\r\n\r\n```java\r\nFoo foo = new Foo();\r\n```\r\n\r\n자바 애플리케이션이 실행중 일 때, 위와 같은 코드를 만난다면 그때 `Foo`라는 클래스를 최초로 **Method Area**에 올리게 됩니다.\r\n**Method Area**에 있는 클래스를 바탕으로 **Heap Area**에 해당 클래스의 인스턴스를 생성하고 `foo` 변수에 해당 메모리의 주소 값을 할당하게 됩니다.\r\n\r\n> 처음부터 모든 클래스의 정보가 적재되는 것이 아니라, 자바 애플리케이션이 실행 중일 때, 최초로 만나는 시점에 메모리에 올라가게 됩니다.\r\n\r\n### Execution Engine\r\n\r\n메모리에 적재된 바이트 코드들을 네이티브 코드로 변경해 명령어 단위로 실행하는 역할을 합니다.\r\n자바는 JIT 방식과 인터프리터 방식 둘 다 사용합니다.\r\n\r\n#### JIT 방식\r\n\r\n한 번에 전체를 네이티브 코드로 변경하여 실행하므로써, 실행 속도를 높이는 방식입니다.\r\n\r\n#### 인터프리터(Interpreter) 방식\r\n\r\n한 줄 씩 읽고 해석하여 실행하는 방식입니다.\r\n\r\n### Garbage Collector (GC)\r\n\r\n**GC**는 **Heap Area**에 생성되었다가 더 이상 아무도 참조하지 않는 객체들을 비워줍니다.\r\nC/C++은 이런 작업을 수동으로 해줘야 하지만, 자바는 **GC**가 자동으로 해주므로 편리합니다.\r\n단, 언제 **GC**가 일어나는지는 알 수 없습니다.\r\n\r\n### Runtime Data Area\r\n\r\nJVM의 메모리 영역입니다.\r\n\r\n#### Method Area (Static Area)\r\n\r\n- 전체 쓰레드와 공유합니다.\r\n\r\n자바 애플리케이션이 실행 중일 때, 클래스가 사용되면, 그 때 JVM이 해당 클래스 파일을 읽어서 해당 클래스의 정보를 여기에 적재합니다.\r\n\r\n- 클래스의 전체 이름\r\n- 상속된 클래스들의 정보 \r\n- 필드\r\n- 메소드 (생성자 포함)\r\n- static 변수\r\n- static 메소드\r\n\r\n등등.. 기본적인 정보는 여기에 다 올라갑니다.\r\n\r\n#### Heap Area\r\n\r\n- 전체 쓰레드와 공유합니다.\r\n\r\n`new` 키워드로 생성된 객체들이 올라가는 영역입니다. **Method Area**에 적재된 클래스들을 기반으로 생성되며, GC의 주영역 입니다.\r\n\r\nJava 버전 7 이후 부터, **Constant Pool**이 **Method Area**에서 **Heap Area**로 변경되었습니다.\r\n즉, 문자열도 여기에 저장이 됩니다.\r\n\r\n#### Stack Area\r\n\r\n- 쓰레드 마다 별도로 생성됩니다.\r\n- 생성된 스택엔 프레임이 들어갑니다.\r\n    - 프레임은 메소드가 호출 될 때마다 생성 됩니다.\r\n\r\n```java\r\npublic class Foo {\r\n  public void foo() {\r\n    Goo goo = new Goo();\r\n  }\r\n}\r\n```\r\n\r\n위와 같은 코드를 실행하면 하나의 쓰레드에 `foo` 메소드를 담을 프레임이 생기고, 해당 프레임에는 `foo` 메소드의 정보가 들어가게됩니다.\r\n\r\n`Goo`의 인스턴스 객체는 **Heap Area**에 저장이 되고, `goo` 변수는 **Stack Area**에 생성됩니다.\r\n그리고 `goo` 변수는 **Heap Area**에 저장된 `Goo` 인스턴스 객체의 주소를 가지게 됩니다.\r\n\r\n메소드가 끝나면 해당 프레임은 사라지게 됩니다.\r\n\r\n#### PC Register\r\n\r\n- 쓰레드 마다 별도로 생성됩니다.\r\n\r\n쓰레드가 생성 될 때마다 생성되고, 현재 실행 중인 쓰레드가 어떤 쓰레드인지 알려주는 역할을 합니다.\r\n\r\n#### Native Method Stack\r\n\r\n- 쓰레드 마다 별도로 생성됩니다.\r\n\r\n네이티브 코드를 위한 영역입니다.","headTitle":"JVM (자바 가상 머신)","fileList":[]},"__N_SSG":true}