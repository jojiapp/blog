{"pageProps":{"mdFile":"# Array (배열)\r\n\r\n## 배열이란?\r\n\r\n배열은 같은 타입의 데이터를 연속된 공간에 생성하여 사용하는 자료구조입니다.\r\n각 공간은 `index`를 이용해 접근이 가능합니다.\r\n\r\n```java\r\nint num0 = 1;\r\nint num1 = 2;\r\nint num2 = 3;\r\n\r\nSystem.out.println(num0);\r\nSystem.out.println(num1);\r\nSystem.out.println(num2);\r\n```\r\n\r\n- 배열이 없으면, 위와 같이 선언하여 사용해야 합니다.\r\n- 귀찮은 것도 귀찮은 거지만, 사용을 해야 할 때, 직접 하나하나 불러서 사용해야 합니다.\r\n- 만약, 저장할 데이터가 많다면... (끔찍)\r\n\r\n```java\r\nint[] nums = new int[3];\r\n\r\nfor(int i = 0; i < nums.length; ++i) {\r\n  num[i] = i + 1;\r\n}\r\n\r\nfor(int num : nums) {\r\n  System.out.println(num)\r\n}\r\n```\r\n\r\n- 반면, 배열을 사용하게 된다면, 위의 `for`문과 같이 `index`를 이용하여 간단하게 값을 할당하고 사용할 수 있습니다.\r\n\r\n> 단, 처음부터 배열의 크기를 지정해야 하고, 연속된 메모리 공간을 할당 받기 때문에 한번 지정하면 배열의 길이는 고정적입니다.\r\n> 이 문제는, `ArrayList` 자료구조를 사용하여 해결 할 수 있습니다.\r\n\r\n## 배열 선언\r\n\r\n### 첫 번째 방법\r\n\r\n```java\r\nint[] arr = new int[3];\r\narr[0] = 1;\r\narr[1] = 2;\r\narr[2] = 3;\r\n```\r\n\r\n- 배열의 공간을 먼저 생성하고, 나중에 `index`를 이용해 값을 할당하는 방식입니다.\r\n\r\n### 두 번째 방법\r\n\r\n```java\r\nint[] arr = new int[] {1, 2, 3};\r\n```\r\n\r\n- 선언과 동시에 값을 할당하여 생성하는 방법입니다.\r\n- 단, 이때는 `new int[]`여기에 배열의 길이를 넣으면 안됩니다.\r\n\r\n### 세 번째 방법\r\n\r\n```java\r\nint[] arr = {1, 2, 3};\r\n```\r\n\r\n- 두 번째 방법 같이 선언과 동시에 값을 할당하는 방식이지만, 두 번째 방식 보다 간략합니다.\r\n\r\n### 그럼 세 번째 방법이 있는데 굳이 두 번째 방법을 왜..?\r\n\r\n그 이유는 세 번째 방법으로는 값을 넣을 수 없는 상황이 있기 때문입니다.\r\n위의 코드들은 전부 선언과 동시에 초기화를 해줬습니다.\r\n그렇다면 선언과 초기화를 따로 한다면 어떻게 될까요?\r\n\r\n```java\r\nint[] arr;\r\narr = {1, 2, 3};\r\n```\r\n\r\n- 위와 같이 하면 될거 같지만 잘못된 문법이라고 뜹니다.\r\n\r\n```java\r\nint[] arr;\r\narr = new int[] {1, 2, 3};\r\n```\r\n\r\n- 이렇게 하면 가능합니다.\r\n\r\n> `new` 키워드 없이 바로 중괄호를 사용하여 값을 할당하는 방식(세 번째 방식)은 선언하는 시점이 아니면 불가능합니다.\r\n\r\n## 다차원 배열\r\n\r\n다차원 배열은 배열안에 또 배열이 있는 형식입니다.\r\n\r\n### 고정길이 선언 방법\r\n\r\n```java\r\nint[][] arr = new int[3][5];\r\n```\r\n\r\n- 일차원 배열과 동일합니다.\r\n\r\n### 가변길이 선언 방법\r\n\r\n```java\r\nint[][] arr = new int[3][];\r\n```\r\n\r\n- 제일 앞에 있는 배열의 크기만 지정해주고 뒤에 배열은 나중에 길이를 정할 수 있습니다.\r\n\r\n### 어떻게 가변길이가 가능하지?\r\n\r\n배열은 처음부터 무조건 크기를 지정해줘야 하고, 길이가 변할 수 없다고 했는데, 어떻게 가변길이가 가능한지 의아할 수 있습니다.\r\n\r\n#### 일차원 배열 뜯어보기\r\n\r\n```java\r\nint[] nums = new int[3];\r\nnums[0] = 1;\r\nnums[1] = 2;\r\nnums[2] = 3;\r\n\r\nint num0 = 1;\r\nint num1 = 2;\r\nint num2 = 3;\r\n```\r\n\r\n- 즉, 일차원 배열을 `index`로 접근하면 기본 타입 `int`를 담을 수 있는 공간이 있고,\r\n해당 공간엔 당연히 `int` 타입을 넣어야 됩니다.\r\n\r\n#### 다차원 배열 뜯어보기\r\n\r\n```java\r\nint[][] arr = new int[3][3];\r\n\r\nint[][] numsList = new int[3][3];\r\nnumsList[0][0] = 1;\r\nnumsList[0][1] = 2;\r\nnumsList[0][2] = 3;\r\n\r\nnumsList[1][0] = 1;\r\nnumsList[1][1] = 2;\r\nnumsList[1][2] = 3;\r\n\r\nnumsList[2][0] = 1;\r\nnumsList[2][1] = 2;\r\nnumsList[2][2] = 3;\r\n```\r\n\r\n- 값을 이렇게 할당 하게 되는데, 잘 보면 앞의 `index`를 이용해서 하나의 일차원 배열에 접근하는 것을 알 수 있습니다.\r\n\r\n```java\r\n// 1번\r\nint[][] numsList = new int[3][5];\r\n\r\n// 2번\r\nint[] nums0 = new int[5];  \r\nint[] nums1 = new int[5];\r\nint[] nums2 = new int[5];\r\n```\r\n\r\n- 1번 처럼 선언하는 것과 2번 처럼 선언하는 것은 동일합니다.\r\n- 일차원 배열의 필요성을 느낀것과 같은 코드입니다.\r\n- 즉, 다차원 배열은 배열을 가지고 있는 배열입니다.\r\n\r\n#### 그래서 가변길이는 어떻게 만드는데?\r\n\r\n```java\r\nint[] nums;\r\nnums = new int[3];\r\n```\r\n\r\n- 위와 같이 일차원 배열을 생성할 때 선언과 초기화를 따로 할 수 있었습니다.\r\n\r\n```java\r\nint[][] numsList = new int[3][];\r\n```\r\n\r\n- 앞의 `index`는 배열을 담고 있는 배열인데 3개의 공간을 생성했으니, `int[] nums;` 3개 만든것과 같습니다.\r\n\r\n```java\r\nnumsList[0] = new int[5];\r\nnumsList[1] = new int[3];\r\nnumsList[2] = new int[2];\r\n```\r\n\r\n- 이제 각각의 `index` 마다 길이가 다른 일차원 배열을 만들어 사용하면 됩니다.\r\n\r\n> 결과적으로 배열의 길이는 고정적이지만, 각각의 `index` 마다 다른 길이의 배열을 할당하여 사용할 수 있습니다.","headTitle":"Array (배열)","fileList":[]},"__N_SSG":true}